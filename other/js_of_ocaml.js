"use strict";

const THIS = global;

// Generated by js_of_ocaml 3.9.0
// produced as follows:
//   $ ocamlfind ocamlc -package js_of_ocaml -package js_of_ocaml-ppx \
//       -linkpkg -o life.byte life.ml
//   $ js_of_ocaml life.byte

function life(joo_global_object, disp) {
    "use strict";

    function caml_subarray_to_jsbytes(a, i, len) {
        var f = String.fromCharCode;
        if (i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
        var s = "";
        for (; 0 < len; i += 1024, len -= 1024)
            s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
        return s
    }

    function caml_convert_bytes_to_array(s) {
        if (joo_global_object.Uint8Array)
            var a = new(joo_global_object.Uint8Array)(s.l);
        else
            var a = new Array(s.l);
        var b = s.c,
            l = b.length,
            i = 0;
        for (; i < l; i++) a[i] = b.charCodeAt(i);
        for (l = s.l; i < l; i++) a[i] = 0;
        s.c = a;
        s.t = 4;
        return a
    }

    function caml_blit_bytes(s1, i1, s2, i2, len) {
        if (len == 0) return 0;
        if (i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)) {
            s2.c =
                s1.t == 4 ?
                caml_subarray_to_jsbytes(s1.c, i1, len) :
                i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
            s2.t = s2.c.length == s2.l ? 0 : 2
        } else
        if (s2.t == 2 && i2 == s2.c.length) {
            s2.c +=
                s1.t == 4 ?
                caml_subarray_to_jsbytes(s1.c, i1, len) :
                i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
            s2.t = s2.c.length == s2.l ? 0 : 2
        } else {
            if (s2.t != 4) caml_convert_bytes_to_array(s2);
            var c1 = s1.c,
                c2 = s2.c;
            if (s1.t == 4)
                if (i2 <= i1)
                    for (var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
                else
                    for (var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
            else {
                var l = Math.min(len, c1.length - i1);
                for (var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
                for (; i < len; i++) c2[i2 + i] = 0
            }
        }
        return 0
    }

    function caml_bytes_of_string(s) {
        return s
    }

    function caml_blit_string(a, b, c, d, e) {
        caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
        return 0
    }

    function caml_call_gen(f, args) {
        if (f.fun) return caml_call_gen(f.fun, args);
        if (typeof f !== "function") return f;
        var n = f.length | 0;
        if (n === 0) return f.apply(null, args);
        var argsLen = args.length | 0,
            d = n - argsLen | 0;
        if (d == 0)
            return f.apply(null, args);
        else
        if (d < 0)
            return caml_call_gen(f.apply(null, args.slice(0, n)), args.slice(n));
        else
            return function() {
                var
                    extra_args = arguments.length == 0 ? 1 : arguments.length,
                    nargs = new Array(args.length + extra_args);
                for (var i = 0; i < args.length; i++) nargs[i] = args[i];
                for (var i = 0; i < arguments.length; i++)
                    nargs[args.length + i] = arguments[i];
                return caml_call_gen(f, nargs)
            }
    }

    function caml_str_repeat(n, s) {
        if (n == 0) return "";
        if (s.repeat) return s.repeat(n);
        var r = "",
            l = 0;
        for (;;) {
            if (n & 1) r += s;
            n >>= 1;
            if (n == 0) return r;
            s += s;
            l++;
            if (l == 9) s.slice(0, 1)
        }
    }

    function caml_convert_string_to_bytes(s) {
        if (s.t == 2)
            s.c += caml_str_repeat(s.l - s.c.length, "\0");
        else
            s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
        s.t = 0
    }

    function jsoo_is_ascii(s) {
        if (s.length < 24) {
            for (var i = 0; i < s.length; i++)
                if (s.charCodeAt(i) > 127) return false;
            return true
        } else
            return !/[^\x00-\x7f]/.test(s)
    }

    function caml_utf16_of_utf8(s) {
        for (var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {
            c1 = s.charCodeAt(i);
            if (c1 < 0x80) {
                for (var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++);
                if (j - i > 512) {
                    t.substr(0, 1);
                    b += t;
                    t = "";
                    b += s.slice(i, j)
                } else
                    t += s.slice(i, j);
                if (j == l) break;
                i = j
            }
            v = 1;
            if (++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128) {
                c = c2 + (c1 << 6);
                if (c1 < 0xe0) {
                    v = c - 0x3080;
                    if (v < 0x80) v = 1
                } else {
                    v = 2;
                    if (++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128) {
                        c = c2 + (c << 6);
                        if (c1 < 0xf0) {
                            v = c - 0xe2080;
                            if (v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2
                        } else {
                            v = 3;
                            if (++i <
                                l &&
                                ((c2 = s.charCodeAt(i)) & -64) ==
                                128 &&
                                c1 <
                                0xf5) {
                                v = c2 - 0x3c82080 + (c << 6);
                                if (v < 0x10000 || v > 0x10ffff) v = 3
                            }
                        }
                    }
                }
            }
            if (v < 4) {
                i -= v;
                t += "\ufffd"
            } else
            if (v > 0xffff)
                t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
            else
                t += String.fromCharCode(v);
            if (t.length > 1024) {
                t.substr(0, 1);
                b += t;
                t = ""
            }
        }
        return b + t
    }

    function MlBytes(tag, contents, length) {
        this.t = tag;
        this.c = contents;
        this.l = length
    }
    MlBytes.prototype.toString =
        function() {
            switch (this.t) {
                case 9:
                    return this.c;
                default:
                    caml_convert_string_to_bytes(this);
                case 0:
                    if (jsoo_is_ascii(this.c)) {
                        this.t = 9;
                        return this.c
                    }
                    this.t = 8;
                case 8:
                    return this.c
            }
        };
    MlBytes.prototype.toUtf16 =
        function() {
            var r = this.toString();
            if (this.t == 9) return r;
            return caml_utf16_of_utf8(r)
        };
    MlBytes.prototype.slice =
        function() {
            var content = this.t == 4 ? this.c.slice() : this.c;
            return new MlBytes(this.t, content, this.l)
        };

    function caml_raise_with_arg(tag, arg) {
        throw [0, tag, arg]
    }

    function caml_bytes_of_jsbytes(s) {
        return new MlBytes(0, s, s.length)
    }

    function caml_string_of_jsbytes(s) {
        return caml_bytes_of_jsbytes(s)
    }

    function caml_raise_with_string(tag, msg) {
        caml_raise_with_arg(tag, caml_string_of_jsbytes(msg))
    }
    var caml_global_data = [0];

    function caml_invalid_argument(msg) {
        caml_raise_with_string(caml_global_data.Invalid_argument, msg)
    }

    function caml_create_bytes(len) {
        if (len < 0) caml_invalid_argument("Bytes.create");
        return new MlBytes(len ? 2 : 9, "", len)
    }

    function caml_fill_bytes(s, i, l, c) {
        if (l > 0)
            if (i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
                if (c == 0) {
                    s.c = "";
                    s.t = 2
                }
        else {
            s.c = caml_str_repeat(l, String.fromCharCode(c));
            s.t = l == s.l ? 0 : 2
        } else {
            if (s.t != 4) caml_convert_bytes_to_array(s);
            for (l += i; i < l; i++) s.c[i] = c
        }
        return 0
    }
    var caml_oo_last_id = 0;

    function caml_fresh_oo_id() {
        return caml_oo_last_id++
    }

    function caml_failwith(msg) {
        caml_raise_with_string(caml_global_data.Failure, msg)
    }

    function caml_jsstring_of_string(s) {
        return s.toUtf16()
    }
    if (joo_global_object.process && joo_global_object.process.cwd)
        var caml_current_dir = joo_global_object.process.cwd().replace(/\\/g, "/");
    else
        var caml_current_dir = "/static";
    if (caml_current_dir.slice(-1) !== "/") caml_current_dir += "/";

    function caml_make_path(name) {
        name = caml_jsstring_of_string(name);
        if (name.charCodeAt(0) != 47) name = caml_current_dir + name;
        var comp = name.split("/"),
            ncomp = [];
        for (var i = 0; i < comp.length; i++)
            switch (comp[i]) {
                case "..":
                    if (ncomp.length > 1) ncomp.pop();
                    break;
                case ".":
                    break;
                case "":
                    if (ncomp.length == 0) ncomp.push("");
                    break;
                default:
                    ncomp.push(comp[i]);
                    break
            }
        ncomp.orig = name;
        return ncomp
    }

    function caml_is_ml_bytes(s) {
        return s instanceof MlBytes
    }

    function caml_is_ml_string(s) {
        return caml_is_ml_bytes(s)
    }

    function caml_bytes_of_array(a) {
        return new MlBytes(4, a, a.length)
    }

    function caml_utf8_of_utf16(s) {
        for (var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++) {
            c = s.charCodeAt(i);
            if (c < 0x80) {
                for (var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++);
                if (j - i > 512) {
                    t.substr(0, 1);
                    b += t;
                    t = "";
                    b += s.slice(i, j)
                } else
                    t += s.slice(i, j);
                if (j == l) break;
                i = j
            }
            if (c < 0x800) {
                t += String.fromCharCode(0xc0 | c >> 6);
                t += String.fromCharCode(0x80 | c & 0x3f)
            } else
            if (c < 0xd800 || c >= 0xdfff)
                t +=
                String.fromCharCode(0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
            else
            if (c >=
                0xdbff ||
                i +
                1 ==
                l ||
                (d = s.charCodeAt(i + 1)) <
                0xdc00 ||
                d >
                0xdfff)
                t += "\xef\xbf\xbd";
            else {
                i++;
                c = (c << 10) + d - 0x35fdc00;
                t
                    +=
                    String.fromCharCode(0xf0 | c >> 18,
                        0x80 | c >> 12 & 0x3f,
                        0x80 | c >> 6 & 0x3f,
                        0x80 | c & 0x3f)
            }
            if (t.length > 1024) {
                t.substr(0, 1);
                b += t;
                t = ""
            }
        }
        return b + t
    }

    function caml_bytes_of_utf16_jsstring(sss) {
        var tag = 9;
        if (!jsoo_is_ascii(sss)) tag = 8, sss = caml_utf8_of_utf16(sss);
        return new MlBytes(tag, sss, sss.length)
    }

    function caml_string_of_jsstring(s) {
        console.log("ICI...", s);
        return caml_bytes_of_utf16_jsstring(s)
    }

    function caml_raise_sys_error(msg) {
        caml_raise_with_string(caml_global_data.Sys_error, msg)
    }

    function caml_jsbytes_of_string(s) {
        if ((s.t & 6) != 0) caml_convert_string_to_bytes(s);
        return s.c
    }

    function caml_raise_no_such_file(name) {
        name = caml_jsbytes_of_string(name);
        caml_raise_sys_error(name + ": No such file or directory")
    }

    function caml_bytes_bound_error() {
        caml_invalid_argument("index out of bounds")
    }

    function caml_bytes_unsafe_get(s, i) {
        switch (s.t & 6) {
            default:
                if (i >= s.c.length) return 0;
            case 0:
                return s.c.charCodeAt(i);
            case 4:
                return s.c[i]
        }
    }

    function caml_bytes_get(s, i) {
        if (i >>> 0 >= s.l) caml_bytes_bound_error();
        return caml_bytes_unsafe_get(s, i)
    }

    function caml_ml_bytes_length(s) {
        return s.l
    }

    function MlFile() {}

    function MlFakeFile(content) {
        this.data = content
    }
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate =
        function(len) {
            var old = this.data;
            this.data = caml_create_bytes(len | 0);
            caml_blit_bytes(old, 0, this.data, 0, len)
        };
    MlFakeFile.prototype.length =
        function() {
            return caml_ml_bytes_length(this.data)
        };
    MlFakeFile.prototype.write =
        function(offset, buf, pos, len) {
            var clen = this.length();
            if (offset + len >= clen) {
                var new_str = caml_create_bytes(offset + len),
                    old_data = this.data;
                this.data = new_str;
                caml_blit_bytes(old_data, 0, this.data, 0, clen)
            }
            caml_blit_string(buf, pos, this.data, offset, len);
            return 0
        };
    MlFakeFile.prototype.read =
        function(offset, buf, pos, len) {
            var clen = this.length();
            caml_blit_bytes(this.data, offset, buf, pos, len);
            return 0
        };
    MlFakeFile.prototype.read_one =
        function(offset) {
            return caml_bytes_get(this.data, offset)
        };
    MlFakeFile.prototype.close = function() {};
    MlFakeFile.prototype.constructor = MlFakeFile;

    function MlFakeDevice(root, f) {
        this.content = {};
        this.root = root;
        this.lookupFun = f
    }
    MlFakeDevice.prototype.nm = function(name) {
        return this.root + name
    };
    MlFakeDevice.prototype.lookup =
        function(name) {
            if (!this.content[name] && this.lookupFun) {
                var
                    res =
                    this.lookupFun(caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
                if (res !== 0)
                    this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))
            }
        };
    MlFakeDevice.prototype.exists =
        function(name) {
            if (name == "") return 1;
            var name_slash = name + "/",
                r = new RegExp("^" + name_slash);
            for (var n in this.content)
                if (n.match(r)) return 1;
            this.lookup(name);
            return this.content[name] ? 1 : 0
        };
    MlFakeDevice.prototype.readdir =
        function(name) {
            var
                name_slash = name == "" ? "" : name + "/",
                r = new RegExp("^" + name_slash + "([^/]*)"),
                seen = {},
                a = [];
            for (var n in this.content) {
                var m = n.match(r);
                if (m && !seen[m[1]]) {
                    seen[m[1]] = true;
                    a.push(m[1])
                }
            }
            return a
        };
    MlFakeDevice.prototype.is_dir =
        function(name) {
            var
                name_slash = name == "" ? "" : name + "/",
                r = new RegExp("^" + name_slash + "([^/]*)"),
                a = [];
            for (var n in this.content) {
                var m = n.match(r);
                if (m) return 1
            }
            return 0
        };
    MlFakeDevice.prototype.unlink =
        function(name) {
            var ok = this.content[name] ? true : false;
            delete this.content[name];
            return ok
        };
    MlFakeDevice.prototype.open =
        function(name, f) {
            if (f.rdonly && f.wronly)
                caml_raise_sys_error(this.nm(name) +
                    " : flags Open_rdonly and Open_wronly are not compatible");
            if (f.text && f.binary)
                caml_raise_sys_error(this.nm(name) +
                    " : flags Open_text and Open_binary are not compatible");
            this.lookup(name);
            if (this.content[name]) {
                if (this.is_dir(name))
                    caml_raise_sys_error(this.nm(name) + " : is a directory");
                if (f.create && f.excl)
                    caml_raise_sys_error(this.nm(name) + " : file already exists");
                var file = this.content[name];
                if (f.truncate) file.truncate();
                return file
            } else
            if (f.create) {
                this.content[name] = new MlFakeFile(caml_create_bytes(0));
                return this.content[name]
            } else
                caml_raise_no_such_file(this.nm(name))
        };
    MlFakeDevice.prototype.register =
        function(name, content) {
            if (this.content[name])
                caml_raise_sys_error(this.nm(name) + " : file already exists");
            if (caml_is_ml_bytes(content))
                this.content[name] = new MlFakeFile(content);
            if (caml_is_ml_string(content))
                this.content[name] = new MlFakeFile(caml_bytes_of_string(content));
            else
            if (content instanceof Array)
                this.content[name] = new MlFakeFile(caml_bytes_of_array(content));
            else
            if (typeof content === "string")
                this.content[name] = new MlFakeFile(caml_bytes_of_jsbytes(content));
            else
            if (content.toString) {
                var
                    bytes =
                    caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
                this.content[name] = new MlFakeFile(bytes)
            } else
                caml_raise_sys_error(this.nm(name) + " : registering file with invalid content type")
        };
    MlFakeDevice.prototype.constructor = MlFakeDevice;

    function caml_ml_string_length(s) {
        return caml_ml_bytes_length(s)
    }

    function caml_string_unsafe_get(s, i) {
        return caml_bytes_unsafe_get(s, i)
    }

    function caml_array_of_string(s) {
        var l = caml_ml_string_length(s),
            a = new Array(l),
            i = 0;
        for (; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
        return a
    }

    function caml_array_of_bytes(s) {
        if (s.t != 4) caml_convert_bytes_to_array(s);
        return s.c
    }

    function caml_bytes_unsafe_set(s, i, c) {
        c &= 0xff;
        if (s.t != 4) {
            if (i == s.c.length) {
                s.c += String.fromCharCode(c);
                if (i + 1 == s.l) s.t = 0;
                return 0
            }
            caml_convert_bytes_to_array(s)
        }
        s.c[i] = c;
        return 0
    }

    function caml_bytes_set(s, i, c) {
        if (i >>> 0 >= s.l) caml_bytes_bound_error();
        return caml_bytes_unsafe_set(s, i, c)
    }

    function MlNodeFile(fd) {
        this.fs = require("fs");
        this.fd = fd
    }
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate =
        function(len) {
            try {
                this.fs.ftruncateSync(this.fd, len | 0)
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeFile.prototype.length =
        function() {
            try {
                return this.fs.fstatSync(this.fd).size
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeFile.prototype.write =
        function(offset, buf, buf_offset, len) {
            var a = caml_array_of_string(buf);
            if (!(a instanceof joo_global_object.Uint8Array))
                a = new(joo_global_object.Uint8Array)(a);
            var buffer = joo_global_object.Buffer.from(a);
            try {
                this.fs.writeSync(this.fd, buffer, buf_offset, len, offset)
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
            return 0
        };
    MlNodeFile.prototype.read =
        function(offset, buf, buf_offset, len) {
            var a = caml_array_of_bytes(buf);
            if (!(a instanceof joo_global_object.Uint8Array))
                a = new(joo_global_object.Uint8Array)(a);
            var buffer = joo_global_object.Buffer.from(a);
            try {
                this.fs.readSync(this.fd, buffer, buf_offset, len, offset)
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
            for (var i = 0; i < len; i++)
                caml_bytes_set(buf, buf_offset + i, buffer[buf_offset + i]);
            return 0
        };
    MlNodeFile.prototype.read_one =
        function(offset) {
            var
                a = new(joo_global_object.Uint8Array)(1),
                buffer = joo_global_object.Buffer.from(a);
            try {
                this.fs.readSync(this.fd, buffer, 0, 1, offset)
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
            return buffer[0]
        };
    MlNodeFile.prototype.close =
        function() {
            try {
                this.fs.closeSync(this.fd)
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeFile.prototype.constructor = MlNodeFile;

    function MlNodeDevice(root) {
        this.fs = require("fs");
        this.root = root
    }
    MlNodeDevice.prototype.nm = function(name) {
        return this.root + name
    };
    MlNodeDevice.prototype.exists =
        function(name) {
            try {
                return this.fs.existsSync(this.nm(name)) ? 1 : 0
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeDevice.prototype.readdir =
        function(name) {
            try {
                return this.fs.readdirSync(this.nm(name))
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeDevice.prototype.is_dir =
        function(name) {
            try {
                return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeDevice.prototype.unlink =
        function(name) {
            try {
                var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
                this.fs.unlinkSync(this.nm(name))
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
            return b
        };
    MlNodeDevice.prototype.open =
        function(name, f) {
            var consts = require("constants"),
                res = 0;
            for (var key in f)
                switch (key) {
                    case "rdonly":
                        res |= consts.O_RDONLY;
                        break;
                    case "wronly":
                        res |= consts.O_WRONLY;
                        break;
                    case "append":
                        res |= consts.O_WRONLY | consts.O_APPEND;
                        break;
                    case "create":
                        res |= consts.O_CREAT;
                        break;
                    case "truncate":
                        res |= consts.O_TRUNC;
                        break;
                    case "excl":
                        res |= consts.O_EXCL;
                        break;
                    case "binary":
                        res |= consts.O_BINARY;
                        break;
                    case "text":
                        res |= consts.O_TEXT;
                        break;
                    case "nonblock":
                        res |= consts.O_NONBLOCK;
                        break
                }
            try {
                var fd = this.fs.openSync(this.nm(name), res);
                return new MlNodeFile(fd)
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeDevice.prototype.rename =
        function(o, n) {
            try {
                this.fs.renameSync(this.nm(o), this.nm(n))
            } catch (err) {
                caml_raise_sys_error(err.toString())
            }
        };
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root = caml_current_dir.match(/[^\/]*\//)[0];

    function fs_node_supported() {
        return typeof joo_global_object.process !==
            "undefined" &&
            typeof joo_global_object.process.versions !==
            "undefined" &&
            typeof joo_global_object.process.versions.node !==
            "undefined" &&
            joo_global_object.process.platform !==
            "browser"
    }
    var jsoo_mount_point = [];
    if (fs_node_supported())
        jsoo_mount_point.push({
            path: caml_root,
            device: new MlNodeDevice(caml_root)
        });
    else
        jsoo_mount_point.push({
            path: caml_root,
            device: new MlFakeDevice(caml_root)
        });
    jsoo_mount_point.push({
        path: caml_root + "static/",
        device: new MlFakeDevice(caml_root + "static/")
    });

    function resolve_fs_device(name) {
        var
            path = caml_make_path(name),
            name = path.join("/"),
            name_slash = name + "/",
            res;
        for (var i = 0; i < jsoo_mount_point.length; i++) {
            var m = jsoo_mount_point[i];
            if (name_slash.search(m.path) ==
                0 &&
                (!res || res.path.length < m.path.length))
                res = {
                    path: m.path,
                    device: m.device,
                    rest: name.substring(m.path.length, name.length)
                }
        }
        return res
    }

    function caml_create_file(name, content) {
        var
            name = typeof name == "string" ? caml_string_of_jsbytes(name) : name,
            content =
            typeof content == "string" ? caml_string_of_jsbytes(content) : content,
            root = resolve_fs_device(name);
        if (!root.device.register) caml_failwith("cannot register file");
        root.device.register(root.rest, content);
        return 0
    }

    function caml_fs_init() {
        var tmp = joo_global_object.caml_fs_tmp;
        if (tmp)
            for (var i = 0; i < tmp.length; i++)
                caml_create_file(tmp[i].name, tmp[i].content);
        joo_global_object.caml_create_file = caml_create_file;
        joo_global_object.caml_fs_tmp = [];
        return 0
    }

    function caml_list_of_js_array(a) {
        var l = 0;
        for (var i = a.length - 1; i >= 0; i--) {
            var e = a[i];
            l = [0, e, l]
        }
        return l
    }
    var caml_ml_channels = new Array();

    function caml_ml_flush(chanid) {
        var chan = caml_ml_channels[chanid];
        if (!chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
        if (!chan.buffer || chan.buffer == "") return 0;
        if (chan.fd &&
            caml_global_data.fds[chan.fd] &&
            caml_global_data.fds[chan.fd].output) {
            var output = caml_global_data.fds[chan.fd].output;
            switch (output.length) {
                case 2:
                    output(chanid, chan.buffer);
                    break;
                default:
                    output(chan.buffer)
            }
        }
        chan.buffer = "";
        return 0
    }

    function caml_std_output(chanid, s) {
        var
            chan = caml_ml_channels[chanid],
            str = caml_string_of_jsbytes(s),
            slen = caml_ml_string_length(str);
        chan.file.write(chan.offset, str, 0, slen);
        chan.offset += slen;
        return 0
    }

    function js_print_stderr(s) {
        var s = caml_utf16_of_utf8(s),
            g = joo_global_object;
        if (g.process && g.process.stdout && g.process.stdout.write)
            g.process.stderr.write(s);
        else {
            if (s.charCodeAt(s.length - 1) == 10) s = s.substr(0, s.length - 1);
            var v = g.console;
            v && v.error && v.error(s)
        }
    }

    function js_print_stdout(s) {
        var s = caml_utf16_of_utf8(s),
            g = joo_global_object;
        if (g.process && g.process.stdout && g.process.stdout.write)
            g.process.stdout.write(s);
        else {
            if (s.charCodeAt(s.length - 1) == 10) s = s.substr(0, s.length - 1);
            var v = g.console;
            v && v.log && v.log(s)
        }
    }

    function caml_sys_open_internal(idx, output, file, flags) {
        if (caml_global_data.fds === undefined)
            caml_global_data.fds = new Array();
        flags = flags ? flags : {};
        var info = {};
        info.file = file;
        info.offset = flags.append ? file.length() : 0;
        info.flags = flags;
        info.output = output;
        caml_global_data.fds[idx] = info;
        if (!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
            caml_global_data.fd_last_idx = idx;
        return idx
    }

    function caml_sys_open(name, flags, _perms) {
        var f = {};
        while (flags) {
            switch (flags[1]) {
                case 0:
                    f.rdonly = 1;
                    break;
                case 1:
                    f.wronly = 1;
                    break;
                case 2:
                    f.append = 1;
                    break;
                case 3:
                    f.create = 1;
                    break;
                case 4:
                    f.truncate = 1;
                    break;
                case 5:
                    f.excl = 1;
                    break;
                case 6:
                    f.binary = 1;
                    break;
                case 7:
                    f.text = 1;
                    break;
                case 8:
                    f.nonblock = 1;
                    break
            }
            flags = flags[2]
        }
        if (f.rdonly && f.wronly)
            caml_raise_sys_error(caml_jsbytes_of_string(name) +
                " : flags Open_rdonly and Open_wronly are not compatible");
        if (f.text && f.binary)
            caml_raise_sys_error(caml_jsbytes_of_string(name) +
                " : flags Open_text and Open_binary are not compatible");
        var
            root = resolve_fs_device(name),
            file = root.device.open(root.rest, f),
            idx = caml_global_data.fd_last_idx ? caml_global_data.fd_last_idx : 0;
        return caml_sys_open_internal(idx + 1, caml_std_output, file, f)
    }
    caml_sys_open_internal
        (0, caml_std_output, new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
        (1, js_print_stdout, new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
        (2, js_print_stderr, new MlFakeFile(caml_create_bytes(0)));

    function caml_ml_open_descriptor_in(fd) {
        var data = caml_global_data.fds[fd];
        if (data.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
        var
            channel = {
                file: data.file,
                offset: data.offset,
                fd: fd,
                opened: true,
                out: false,
                refill: null
            };
        caml_ml_channels[channel.fd] = channel;
        return channel.fd
    }

    function caml_ml_open_descriptor_out(fd) {
        var data = caml_global_data.fds[fd];
        if (data.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
        var
            channel = {
                file: data.file,
                offset: data.offset,
                fd: fd,
                opened: true,
                out: true,
                buffer: ""
            };
        caml_ml_channels[channel.fd] = channel;
        return channel.fd
    }

    function caml_ml_out_channels_list() {
        var l = 0;
        for (var c = 0; c < caml_ml_channels.length; c++)
            if (caml_ml_channels[c] &&
                caml_ml_channels[c].opened &&
                caml_ml_channels[c].out)
                l = [0, caml_ml_channels[c].fd, l];
        return l
    }

    function caml_string_of_bytes(s) {
        return s
    }

    function caml_ml_output_bytes(chanid, buffer, offset, len) {
        var chan = caml_ml_channels[chanid];
        if (!chan.opened)
            caml_raise_sys_error("Cannot output to a closed channel");
        var bytes;
        if (offset == 0 && caml_ml_bytes_length(buffer) == len)
            bytes = buffer;
        else {
            bytes = caml_create_bytes(len);
            caml_blit_bytes(buffer, offset, bytes, 0, len)
        }
        var
            string = caml_string_of_bytes(bytes),
            jsstring = caml_jsbytes_of_string(string),
            id = jsstring.lastIndexOf("\n");
        if (id < 0)
            chan.buffer += jsstring;
        else {
            chan.buffer += jsstring.substr(0, id + 1);
            caml_ml_flush(chanid);
            chan.buffer += jsstring.substr(id + 1)
        }
        return 0
    }

    function caml_ml_output(chanid, buffer, offset, len) {
        return caml_ml_output_bytes(chanid, caml_bytes_of_string(buffer), offset, len)
    }

    function caml_ml_output_char(chanid, c) {
        var s = caml_string_of_jsbytes(String.fromCharCode(c));
        caml_ml_output(chanid, s, 0, 1);
        return 0
    }

    function caml_register_global(n, v, name_opt) {
        if (name_opt && joo_global_object.toplevelReloc)
            n = joo_global_object.toplevelReloc(name_opt);
        caml_global_data[n + 1] = v;
        if (name_opt) caml_global_data[name_opt] = v
    }

    function caml_sys_const_backend_type() {
        return [0, caml_string_of_jsbytes("js_of_ocaml")]
    }

    function caml_return_exn_constant(tag) {
        return tag
    }
    var caml_named_values = {};

    function caml_named_value(nm) {
        return caml_named_values[nm]
    }

    function caml_wrap_exception(e) {
        if (e instanceof Array) return e;
        if (joo_global_object.RangeError &&
            e instanceof joo_global_object.RangeError &&
            e.message &&
            e.message.match(/maximum call stack/i))
            return caml_return_exn_constant(caml_global_data.Stack_overflow);
        if (joo_global_object.InternalError &&
            e instanceof joo_global_object.InternalError &&
            e.message &&
            e.message.match(/too much recursion/i))
            return caml_return_exn_constant(caml_global_data.Stack_overflow);
        if (e instanceof joo_global_object.Error && caml_named_value("jsError"))
            return [0, caml_named_value("jsError"), e];
        return [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))]
    }

    function caml_call1(f, a0) {
        return f.length == 1 ? f(a0) : caml_call_gen(f, [a0])
    }

    function caml_call2(f, a0, a1) {
        return f.length == 2 ? f(a0, a1) : caml_call_gen(f, [a0, a1])
    }
    caml_fs_init();
    var
        Out_of_memory = [248, caml_string_of_jsbytes("Out_of_memory"), -1],
        Sys_error = [248, caml_string_of_jsbytes("Sys_error"), -2],
        Failure = [248, caml_string_of_jsbytes("Failure"), -3],
        Invalid_argument = [248, caml_string_of_jsbytes("Invalid_argument"), -4],
        End_of_file = [248, caml_string_of_jsbytes("End_of_file"), -5],
        Division_by_zero = [248, caml_string_of_jsbytes("Division_by_zero"), -6],
        Not_found = [248, caml_string_of_jsbytes("Not_found"), -7],
        Match_failure = [248, caml_string_of_jsbytes("Match_failure"), -8],
        Stack_overflow = [248, caml_string_of_jsbytes("Stack_overflow"), -9],
        Sys_blocked_io = [248, caml_string_of_jsbytes("Sys_blocked_io"), -10],
        Assert_failure = [248, caml_string_of_jsbytes("Assert_failure"), -11],
        Undefined_recursive_module = [248, caml_string_of_jsbytes("Undefined_recursive_module"), -12];
    caml_register_global
        (11, Undefined_recursive_module, "Undefined_recursive_module");
    caml_register_global(10, Assert_failure, "Assert_failure");
    caml_register_global(9, Sys_blocked_io, "Sys_blocked_io");
    caml_register_global(8, Stack_overflow, "Stack_overflow");
    caml_register_global(7, Match_failure, "Match_failure");
    caml_register_global(6, Not_found, "Not_found");
    caml_register_global(5, Division_by_zero, "Division_by_zero");
    caml_register_global(4, End_of_file, "End_of_file");
    caml_register_global(3, Invalid_argument, "Invalid_argument");
    caml_register_global(2, Failure, "Failure");
    caml_register_global(1, Sys_error, "Sys_error");
    caml_register_global(0, Out_of_memory, "Out_of_memory");
    caml_fresh_oo_id(0);
    var
        _m_ = [0, 1, 0],
        _n_ = [0, 0, 0],
        _s_ = caml_string_of_jsbytes("\n"),
        _h_ = caml_string_of_jsbytes("0"),
        _i_ = caml_string_of_jsbytes(""),
        _j_ = caml_string_of_jsbytes(""),
        _k_ = [0, [0, 0, 0],
            [0, [0, 0, 2],
                [0, [0, 1, 1],
                    [0, [0, 1, 2],
                        [0, [0, 2, 1], 0]
                    ]
                ]
            ]
        ],
        _l_ = [0, [0, 0, 0],
            [0, [0, 0, 1],
                [0, [0, 1, 0],
                    [0, [0, 1, 1], 0]
                ]
            ]
        ],
        _o_ = [0, 5, 20],
        _p_ = [0, 2, 12],
        _q_ = [0, 2, 2],
        _r_ =
        caml_list_of_js_array([
            [0, 2, 20],
            [0, 3, 19],
            [0, 3, 21],
            [0, 4, 18],
            [0, 4, 22],
            [0, 4, 23],
            [0, 4, 32],
            [0, 5, 7],
            [0, 5, 8],
            [0, 5, 18],
            [0, 5, 22],
            [0, 5, 23],
            [0, 5, 29],
            [0, 5, 30],
            [0, 5, 31],
            [0, 5, 32],
            [0, 5, 36],
            [0, 6, 7],
            [0, 6, 8],
            [0, 6, 18],
            [0, 6, 22],
            [0, 6, 23],
            [0, 6, 28],
            [0, 6, 29],
            [0, 6, 30],
            [0, 6, 31],
            [0, 6, 36],
            [0, 7, 19],
            [0, 7, 21],
            [0, 7, 28],
            [0, 7, 31],
            [0, 7, 40],
            [0, 7, 41],
            [0, 8, 20],
            [0, 8, 28],
            [0, 8, 29],
            [0, 8, 30],
            [0, 8, 31],
            [0, 8, 40],
            [0, 8, 41],
            [0, 9, 29],
            [0, 9, 30],
            [0, 9, 31],
            [0, 9, 32]
        ]);

    function _a_(_ca_, _b$_) {
        var
            _cb_ = caml_ml_string_length(_ca_),
            _cc_ = caml_ml_string_length(_b$_),
            _cd_ = caml_create_bytes(_cb_ + _cc_ | 0);
        caml_blit_string(_ca_, 0, _cd_, 0, _cb_);
        caml_blit_string(_b$_, 0, _cd_, _cb_, _cc_);
        return caml_string_of_bytes(_cd_)
    }

    function _b_(_b9_, _b8_) {
        if (_b9_) {
            var _b__ = _b9_[1];
            return [0, _b__, _b_(_b9_[2], _b8_)]
        }
        return _b8_
    }
    caml_ml_open_descriptor_in(0);
    var _c_ = caml_ml_open_descriptor_out(1);
    caml_ml_open_descriptor_out(2);
    caml_fresh_oo_id(0);
    typeof caml_sys_const_backend_type(0) === "number";
    caml_fresh_oo_id(0);

    function _e_(_b5_, _b4_) {
        if (_b4_)
            var _b6_ = _e_(_b5_, _b4_[2]),
                _b7_ = [0, caml_call1(_b5_, _b4_[1]), _b6_];
        else
            var _b7_ = _b4_;
        return _b7_
    }

    function _f_(_b3_, _b2_, _b1_) {
        return caml_call1(_b3_, caml_call1(_b2_, _b1_))
    }

    function _g_(_z_) {
        function _A_(_bY_) {
            if (_bY_) {
                var _b0_ = 0,
                    _bZ_ = _bY_;
                for (;;) {
                    if (_bZ_) {
                        var _b0_ = [0, _bZ_[1], _b0_],
                            _bZ_ = _bZ_[2];
                        continue
                    }
                    return _b0_
                }
            }
            return _bY_
        }

        function _B_(_bU_, _bT_, _bS_) {
            var _bW_ = _bT_,
                _bV_ = _bS_;
            for (;;) {
                if (_bV_) {
                    var _bX_ = _bV_[2],
                        _bW_ = caml_call2(_bU_, _bW_, _bV_[1]),
                        _bV_ = _bX_;
                    continue
                }
                return _bW_
            }
        }

        function _C_(_bK_) {
            function _bL_(_bR_, _bQ_) {
                return caml_call1(_bK_, _bQ_) ? [0, _bQ_, _bR_] : _bR_
            }
            var _bM_ = 0;

            function _bN_(_bP_) {
                return _B_(_bL_, _bM_, _bP_)
            }
            return function(_bO_) {
                return _f_(_A_, _bN_, _bO_)
            }
        }

        function _D_(_bJ_, _bI_) {
            var _bG_ = _bJ_;
            for (;;) {
                if (_bG_) {
                    var
                        _bH_ = _bG_[1],
                        _bE_ = _bI_[1] === _bH_[1] ? 1 : 0,
                        _bF_ = _bE_ ? _bI_[2] === _bH_[2] ? 1 : 0 : _bE_;
                    if (_bF_) return 1;
                    var _bG_ = _bG_[2];
                    continue
                }
                return _bG_
            }
        }

        function _E_(_bC_, _bD_) {
            return [0, _bD_, _bC_]
        }

        function _F_(_bB_, _bA_) {
            return _bB_ + 1 | 0
        }
        var _G_ = 0;

        function _H_(_bz_) {
            return _B_(_F_, _G_, _bz_)
        }

        function _J_(_bu_, _bt_) {
            var _bv_ = _bt_[1],
                _bw_ = _bu_[1];
            if (_bv_ < _bw_) return 1;
            var _bx_ = _bv_ === _bw_ ? 1 : 0,
                _by_ = _bx_ ? _bt_[2] < _bu_[2] ? 1 : 0 : _bx_;
            return _by_
        }

        function _I_(_bn_) {
            if (_bn_) {
                var
                    _bo_ = _bn_[2],
                    _bp_ = _bn_[1],
                    _bq_ =
                    _b_([0, _bp_, 0],
                        _I_(caml_call1(_C_(function(_bs_) {
                            return _J_(_bs_, _bp_)
                        }), _bo_)));
                return _b_(_I_(caml_call1(_C_(function(_br_) {
                        return _J_(_bp_, _br_)
                    }), _bo_)),
                    _bq_)
            }
            return _bn_
        }

        function _K_(_bm_) {
            return _bm_[1]
        }

        function _L_(_bl_) {
            return [0, _I_(_bl_)]
        }

        function _M_(_bi_) {
            var _bj_ = _bi_[2],
                _bk_ = _bi_[1];
            return [0,
                [0, _bk_ - 1 | 0, _bj_ - 1 | 0],
                [0,
                    [0, _bk_ - 1 | 0, _bj_],
                    [0,
                        [0, _bk_ - 1 | 0, _bj_ + 1 | 0],
                        [0,
                            [0, _bk_, _bj_ - 1 | 0],
                            [0,
                                [0, _bk_, _bj_ + 1 | 0],
                                [0,
                                    [0, _bk_ + 1 | 0, _bj_ - 1 | 0],
                                    [0,
                                        [0, _bk_ + 1 | 0, _bj_],
                                        [0, [0, _bk_ + 1 | 0, _bj_ + 1 | 0], 0]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ]
        }

        function _N_(_a0_) {
            var _a1_ = 0,
                _a2_ = 0;

            function _a3_(_a__, _a9_, _a8_) {
                var _bb_ = _a__,
                    _ba_ = _a9_,
                    _a$_ = _a8_;
                for (;;) {
                    if (_a$_) {
                        var
                            _bc_ = _a$_[2],
                            _bd_ = _a$_[1],
                            _be_ = _bd_[2],
                            _bf_ = _bd_[1],
                            _bg_ = _bb_[1];
                        if (_bg_ === _bf_) {
                            var _bh_ = _be_ - _bb_[2] | 0,
                                _a7_ = caml_create_bytes(_bh_);
                            caml_fill_bytes(_a7_, 0, _bh_, 32);
                            var
                                _bb_ = [0, _bg_, _be_ + 1 | 0],
                                _ba_ = _a_(_ba_, _a_(caml_string_of_bytes(_a7_), _h_)),
                                _a$_ = _bc_;
                            continue
                        }
                        return [0,
                            _ba_,
                            _a3_([0, _bg_ + 1 | 0, _a2_], _i_, [0, [0, _bf_, _be_], _bc_])
                        ]
                    }
                    return [0, _ba_, 0]
                }
            }
            return _a3_([0, _a1_, _a2_],
                _j_,
                caml_call1(_C_(function(_a4_) {
                        var _a5_ = 0 <= _a4_[1] ? 1 : 0,
                            _a6_ = _a5_ ? 0 <= _a4_[2] ? 1 : 0 : _a5_;
                        return _a6_
                    }),
                    _a0_))
        }

        function _O_(_aW_, _aV_) {
            var _aX_ = _aV_[2],
                _aY_ = _aV_[1];
            return _e_(function(_aZ_) {
                    return [0, _aZ_[1] + _aY_ | 0, _aZ_[2] + _aX_ | 0]
                },
                _aW_)
        }

        function _P_(_aU_) {
            return [0, _aU_[2], -_aU_[1] | 0]
        }

        function _Q_(_aT_) {
            return _aT_ === 4 ?
                [0, [0, 7, 8],
                    [0, [0, 8, 8], 0]
                ] :
                [0,
                    [0, _aT_ + _aT_ | 0, (_aT_ + _aT_ | 0) + 1 | 0],
                    [0,
                        [0, (_aT_ + _aT_ | 0) + 2 | 0, (_aT_ + _aT_ | 0) + 1 | 0],
                        _Q_(_aT_ + 1 | 0)
                    ]
                ]
        }
        var
            _R_ = _O_(_e_(_P_, [0, _n_, [0, _m_, _Q_(0)]]), _o_),
            _S_ = _b_(_O_(_l_, _p_), _R_);
        _L_(_b_(_O_(_k_, _q_), _S_));

        function _T_(_az_, _ay_) {
            var _aB_ = _az_,
                _aA_ = _ay_;
            a:
                for (;;) {
                    if (0 === _aA_) return _aB_;
                    var
                        _aq_ = _aB_[1],
                        _aC_ = _aA_ - 1 | 0,
                        _ar_ =
                        function(_aR_) {
                            return function(_aS_) {
                                return _D_(_aR_, _aS_)
                            }
                        }(_aq_),
                        _as_ = _C_(_ar_),
                        _at_ =
                        function(_aP_) {
                            return function(_aQ_) {
                                return _f_(_H_, _aP_, _aQ_)
                            }
                        }
                        (_as_),
                        _au_ =
                        function(_aN_) {
                            return function(_aO_) {
                                return _f_(_aN_, _M_, _aO_)
                            }
                        }
                        (_at_),
                        _av_ =
                        function(_aK_) {
                            var _aL_ = 2 === _aK_ ? 1 : 0,
                                _aM_ = _aL_ || (3 === _aK_ ? 1 : 0);
                            return _aM_
                        },
                        _aw_ =
                        caml_call1(_C_(function(_aH_, _aI_) {
                                    return function(_aJ_) {
                                        return _f_(_aI_, _aH_, _aJ_)
                                    }
                                }
                                (_au_, _av_)),
                            _aq_),
                        _ah_ = 0,
                        _ag_ = _aq_,
                        _ax_ =
                        _C_(function(_aF_) {
                                return function(_aG_) {
                                    return 1 - _aF_(_aG_)
                                }
                            }
                            (_ar_));
                    for (;;) {
                        if (_ag_) {
                            var
                                _ai_ = _ag_[2],
                                _ah_ = _B_(_E_, _ah_, _f_(_ax_, _M_, _ag_[1])),
                                _ag_ = _ai_;
                            continue
                        }
                        var _an_ = 0,
                            _am_ = 0,
                            _al_ = 0,
                            _ak_ = 0,
                            _aj_ = _ah_;
                        for (;;) {
                            if (_aj_) {
                                var _ao_ = _aj_[2],
                                    _ap_ = _aj_[1];
                                if (_D_(_an_, _ap_)) {
                                    var _aj_ = _ao_;
                                    continue
                                }
                                if (_D_(_am_, _ap_)) {
                                    var _an_ = [0, _ap_, _an_],
                                        _aj_ = _ao_;
                                    continue
                                }
                                if (_D_(_al_, _ap_)) {
                                    var _am_ = [0, _ap_, _am_],
                                        _aj_ = _ao_;
                                    continue
                                }
                                if (_D_(_ak_, _ap_)) {
                                    var _al_ = [0, _ap_, _al_],
                                        _aj_ = _ao_;
                                    continue
                                }
                                var _ak_ = [0, _ap_, _ak_],
                                    _aj_ = _ao_;
                                continue
                            }
                            var
                                _aB_ =
                                _L_(_b_(_aw_,
                                    caml_call1(_C_(function(_aD_) {
                                                return function(_aE_) {
                                                    return 1 - _D_(_aD_, _aE_)
                                                }
                                            }
                                            (_an_)),
                                        _am_))),
                                _aA_ = _aC_;
                            continue a
                        }
                    }
                }
        }
        var _U_ = _L_(_r_);

        function _V_(___) {
            function _$_(_af_) {
                var _ad_ = _af_;
                for (;;) {
                    if (_ad_) {
                        var _ae_ = _ad_[2];
                        caml_call1(___, _ad_[1]);
                        caml_call1(___, _s_);
                        var _ad_ = _ae_;
                        continue
                    }
                    return 0
                }
            }

            function _aa_(_ac_) {
                return _f_(_$_, _N_, _ac_)
            }
            return function(_ab_) {
                return _f_(_aa_, _K_, _ab_)
            }
        }
        if (9999999 <= _z_) {
            var _W_ = _T_(_U_, 50);
            caml_call1
                (_V_(function(_Z_) {
                        return caml_ml_output(_c_, _Z_, 0, caml_ml_string_length(_Z_))
                    }),
                    _W_);
            caml_ml_output_char(_c_, 10);
            return caml_ml_flush(_c_)
        }
        var _X_ = _T_(_U_, 50);
        return caml_call1(_V_(function(_Y_) {
            return 0
        }), _X_)
    }
    _g_(disp);

    function _d_(_t_) {
        var _u_ = _t_;
        for (;;) {
            if (_u_) {
                var _v_ = _u_[2],
                    _w_ = _u_[1];
                try {
                    caml_ml_flush(_w_)
                } catch (_y_) {
                    _y_ = caml_wrap_exception(_y_);
                    if (_y_[1] !== Sys_error) throw _y_;
                    var _x_ = _y_
                }
                var _u_ = _v_;
                continue
            }
            return 0
        }
    }
    _d_(caml_ml_out_channels_list(0));
    return
}

function main(bench, n) {
    var res;
    let N = Math.round(n / 10);

    for (let i = 0, j = 0; i < n; i++, j++) {
        res = life(THIS, 9999998);
        if (j === N) {
            console.log(i);
            j = 0;
        }
    }
    console.log(bench, res);
}

const K = 2;
const N =
    (process.argv[1] === "fprofile") ?
    K / 1 :
    ((process.argv[2] ? parseInt(process.argv[2]) : 100) * K);

life(THIS, 9999999);

main("life", N);
